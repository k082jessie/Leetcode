class Solution:
    def countBalls(self, lowLimit: int, highLimit: int) -> int:
        box = defaultdict(int)
        
        for num in range(lowLimit, highLimit+1):
            tmp = int(str(num)[0])

            while len(str(num)) > 1:
                tmp += num % 10
                num //= 10
            box[tmp] += 1  

        box = dict(sorted(box.items(), key=lambda item: item[1], reverse=True))
        return list(box.values())[0]
        
        ### Other Solution
        def numberSum(number:int)->int:
            sum1 = 0
            while number:
                sum1 += number%10
                number = number //10
            return sum1
        
        # create a hashmap having key as box number and value as box count
        hashMap = defaultdict(int)
        
        for i in range(lowLimit, highLimit+1):
            # pass i to numberSum function inorder to find it's sum1
            # Once sum1 is found, we'll use this sum1 as our hash_val
            # If box has alreary one ball avaiable then increment it by one
            hash_val = numberSum(i)
            hashMap[hash_val] += 1
        
        # Check balls in every box
        # hashMap.values() will create an array of balls count in each box.
        values = hashMap.values()
        
        # return maximum balls in boxes
        return max(values)
